<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:beans="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
    <!--此文件负责整个mvc中的配置-->
    <!-- 自动扫描装配 -->
    <context:component-scan base-package="com.wang"/>
    <!--扫描指定的包中的类上的注解，如@Controller,@Service,@Autowired等-->

    <!--启用spring的一些annotation
    注：如果配置了<context:component-scan>那么<context:annotation-config/>标签就可以不用在xml中再配置了，因为前者包含了后者-->
    <!--<context:annotation-config/>-->

    <!-- 配置注解驱动 可以将request参数与绑定到controller参数上 -->
    <!-- mvc注解  -->
    <mvc:annotation-driven enable-matrix-variables="true">
        <mvc:message-converters  register-defaults="true">
            <beans:bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>text/html;charset=UTF-8</value>
                        <value>text/plain;charset=UTF-8</value>
                        <value>application/json;charset=UTF-8</value>
                    </list>
                </property>
            </beans:bean>
            <beans:bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <beans:property name="objectMapper" ref="jacksonObjectMapper"/>
                <property name="supportedMediaTypes">
                    <list>
                        <value>application/json;charset=UTF-8</value>
                    </list>
                </property>
            </beans:bean>
            <beans:bean class="org.springframework.http.converter.ByteArrayHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>text/plain;charset=UTF-8</value>
                    </list>
                </property>
            </beans:bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
    <!--<mvc:annotation-driven/>-->
    <!--annotation-driven是一种简写形式， 会自动注册DefaultAnnotationHandlerMapping与AnnotationMethodHandlerAdapter 两个bean,
    是spring MVC为@Controllers分发请求所必须的。-->
    <!-- 拦截器 -->
    <!--<mvc:interceptors>-->
        <!--<bean class="com.core.mvc.MyInteceptor" />-->
    <!--</mvc:interceptors>-->
    <!--<mvc:interceptors/> 是一种简写形式。可以配置多个HandlerMapping。
    <mvc:interceptors/>会为每一个HandlerMapping注入一个拦截器。-->

    <!-- Freemarker配置 -->
    <!-- 配置freeMarker的模板路径 -->
    <bean class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
        <property name="templateLoaderPath" value="WEB-INF/views/" />
        <property name="defaultEncoding" value="UTF-8" />
        <!--<property name="freemarkerSettings">-->
        <!--<props>-->
        <!--<prop key="incompatible_improvements">2.3.23</prop>-->
        <!--<prop key="template_exception_handler">rethrow</prop>-->
        <!--<prop key="default_encoding">UTF-8</prop>-->
        <!--</props>-->
        <!--</property>-->
    </bean>
    <!-- freemarker视图解析器 -->
    <bean class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
        <property name="suffix" value=".ftl" />
        <property name="contentType" value="text/html;charset=UTF-8" />
        <!-- 此变量值为pageContext.request, 页面使用方法：rc.contextPath -->
        <!--<property name="requestContextAttribute" value="rc" />-->
    </bean>

    <!-- 对静态资源文件的访问  方案一 （二选一） -->
    <!--<mvc:default-servlet-handler/>-->
    <!--静态资源映射 方案二 （二选一）-->
    <!--本项目把静态资源放在了webapp的statics目录下，资源映射如下-->
    <mvc:resources mapping="/css/**" location="/WEB-INF/statics/css/"/>
    <mvc:resources mapping="/js/**" location="/WEB-INF/statics/js/"/>
    <mvc:resources mapping="/image/**" location="/WEB-INF/statics/image/"/>
    <!--把mapping的URI注册到SimpleUrlHandlerMapping的urlMap中-->

    <!-- 对模型视图名称的解析，即在模型视图名称添加前后缀(如果最后一个还是表示文件夹,则最后的斜杠不要漏了) 使用JSP-->
    <!-- 默认的视图解析器 在上边的解析错误时使用 (默认使用html)- -->
    <bean id="defaultViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/WEB-INF/views/"/><!--设置JSP文件的目录位置-->
        <property name="suffix" value=".jsp"/>
        <property name="exposeContextBeansAsAttributes" value="true"/>
    </bean>
    <!-- SpringMVC上传文件时，需要配置MultipartResolver处理器 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.support.StandardServletMultipartResolver">
    </bean>
    <!--<bean id="multipartResolver2" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">-->
        <!--<property name="defaultEncoding" value="utf-8"/>-->
        <!--&lt;!&ndash; 指定所上传文件的总大小不能超过10485760000B。注意maxUploadSize属性的限制不是针对单个文件，而是所有文件的容量之和 &ndash;&gt;-->
        <!--<property name="maxUploadSize" value="10485760000"/>-->
        <!--<property name="maxInMemorySize" value="40960"/>-->
    <!--</bean>-->
</beans>